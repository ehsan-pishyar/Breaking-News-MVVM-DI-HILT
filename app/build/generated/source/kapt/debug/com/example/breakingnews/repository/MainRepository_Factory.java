// Generated by Dagger (https://dagger.dev).
package com.example.breakingnews.repository;

import com.example.breakingnews.data.api.helper.NewsApiHelper;
import com.example.breakingnews.databse.NewsDatabase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainRepository_Factory implements Factory<MainRepository> {
  private final Provider<NewsApiHelper> newsApiHelperProvider;

  private final Provider<NewsDatabase> dbProvider;

  public MainRepository_Factory(Provider<NewsApiHelper> newsApiHelperProvider,
      Provider<NewsDatabase> dbProvider) {
    this.newsApiHelperProvider = newsApiHelperProvider;
    this.dbProvider = dbProvider;
  }

  @Override
  public MainRepository get() {
    return newInstance(newsApiHelperProvider.get(), dbProvider.get());
  }

  public static MainRepository_Factory create(Provider<NewsApiHelper> newsApiHelperProvider,
      Provider<NewsDatabase> dbProvider) {
    return new MainRepository_Factory(newsApiHelperProvider, dbProvider);
  }

  public static MainRepository newInstance(NewsApiHelper newsApiHelper, NewsDatabase db) {
    return new MainRepository(newsApiHelper, db);
  }
}
